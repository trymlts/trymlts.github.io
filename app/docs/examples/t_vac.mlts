type utm =
| App of utm * utm
| Abs of utm => utm
;;

let rec vacp1 t =  match t with
  | Abs(X\ X)                 -> false
  | nab Y in Abs(X\ Y)        -> true
  | Abs(X\ App(m @ X, n @ X)) -> 
      (vacp1 (Abs m)) && (vacp1 (Abs n))
  | Abs(X\(Abs(Y\(r @ X Y)))) -> 
      new Y in vacp1(Abs(X\ (r @ X Y)))
  | _                         -> false ;;

let vacp t =
  match t with
  | Abs(r) -> new X in
    let rec aux term =
      match term with
      | X -> false
      | nab Y in Y -> true
      | App(m, n) -> (aux m) && (aux n)
      | Abs(r) -> new Y in aux (r @ Y)
    in aux (r @ X)
;;	

let vacp2 t = match t with
  | Abs(X\s)  -> true
  | _         -> false ;;	    
	    
vacp1 (Abs(X\ X));;
vacp1 (Abs(X\ App(X, X)));;
vacp1 (Abs(X\ Abs(Y\ Y)));;	

vacp (Abs(X\ X));;
vacp (Abs(X\ App(X, X)));;
vacp (Abs(X\ Abs(Y\ Y)));;	
	    
vacp2 (Abs(X\ X));;
vacp2 (Abs(X\ App(X, X)));;
vacp2 (Abs(X\ Abs(Y\ Y)));;	