type tm =
     | App of tm * tm
     | Abs of tm => tm ;;

let rec vacp1 t =  match t with
    | Abs(X\X)                  -> false
    | nab Y in Abs(X\Y)         -> true
    | Abs(X\ App(m @ X, n @ X)) -> (vacp1 (Abs m)) && (vacp1 (Abs n))
    | Abs(X\ Abs(Y\ r @ X Y))   -> new Y in vacp1(Abs(X\ r @ X Y))
    | t                         -> false ;;

let rec vacp2 t = match t with
    | Abs(r) -> new X in
                 let rec aux term = match term with
                       | X          -> false
                       | nab Y in Y -> true
                       | App(m, n)  -> (aux m) && (aux n)
                       | Abs(u)     -> new Y in aux (u @ Y)
                  in aux (r @ X)
    | t      -> false;;

let vacp3 t = match t with
    | Abs(X\s)  -> true
    | t         -> false ;;

vacp1 (Abs(X\X));;
vacp1 (Abs(X\ App(X, X)));;
vacp1 (Abs(X\ Abs(Y\Y)));;	
vacp1 (App(Abs(X\X),Abs(X\X)));;

vacp2 (Abs(X\X));;
vacp2 (Abs(X\ App(X, X)));;
vacp2 (Abs(X\ Abs(Y\Y)));;	
vacp2 (App(Abs(X\X),Abs(X\X)));;

vacp3 (Abs(X\X));;
vacp3 (Abs(X\ App(X, X)));;
vacp3 (Abs(X\ Abs(Y\Y)));;	
vacp3 (App(Abs(X\X),Abs(X\X)));;