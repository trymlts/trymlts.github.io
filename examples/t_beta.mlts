type tm =
  | App of tm * tm
  | Abs of tm => tm
;;


let rec subst t x u =
  match (x, t) with
  | nab X in (X, X) -> u
  | nab X Y in (X, Y) -> Y
  | (x, App(m, n)) -> 
      App(subst m x u, subst n x u)
  | (x, Abs r) -> Abs(Y\ subst (r @ Y) x u)
;;


let rec beta t =
  match t with
  | nab X in X -> X
  | Abs r -> Abs (Y\ beta (r @ Y))
  | App(m, n) ->
    let m = beta m in
    let n = beta n in
    begin match m with
      | Abs r -> 
          new X in beta (subst (r @ X) X n)
      | w -> App(m, n)
    end
;;

beta (App(App(Abs(X\Abs(Y\Abs(Z\App(App(X,Z),App(Y,Z))))),
              Abs(X\Abs(Y\X))),
          Abs(X\Abs(Y\X))));;