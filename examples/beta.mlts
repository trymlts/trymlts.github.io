type utm =
     | App of utm * utm
     | Abt of utm => utm
     ;;
     
let rec aux_beta var body term =
  match var::body::[] with
  | nab X in X::App(m @ X, n @ X)::[] ->
              App(aux_beta (X) (m @ X) term, aux_beta (X) (n @ X) term)
  | nab X in X::(Abt(r @ X))::[] ->
              Abt(Y\ aux_beta (X) (r @ X Y) term)
  | nab X in X::X::[] -> term
  | nab X Y in X::Y::[] -> Y

;;
         
 
let rec beta absterm term =
  match absterm with
  | Abt(r) -> new X in aux_beta (X) (r @ X) term
;;

beta (Abt(X\X)) (Abt(X\X));;
beta (Abt(X\ App(X, X))) (Abt(X\X));;
beta (Abt(X\ Abt(Y\ App(X, X)))) (Abt(X\X));;
beta (Abt(X\ Abt(Y\ App(X, Y)))) (Abt(X\X));;
beta (Abt(X\ Abt(Y\ X))) (Abt(X\X));;
beta (Abt(X\ Abt(Y\ Y))) (Abt(X\X));;

let rec bred aterm term =
  match aterm with
  | Abt(X\ App(m @ X, n @ X)) ->
     App(bred (Abt(m)) term, bred (Abt(n)) term)
  |  Abt(X\ Abt(r @ X)) ->
      Abt(Y\ (bred (Abt(X\ r @ X Y)) term))
  | Abt(X\ X) -> term
  | nab Y in Abt(X\ Y) -> Y
;;

bred (Abt(X\X)) (Abt(X\X));;
bred (Abt(X\ App(X, X))) (Abt(X\X));;
bred (Abt(X\ Abt(Y\ App(X, X)))) (Abt(X\X));;
bred (Abt(X\ Abt(Y\ App(X, Y)))) (Abt(X\X));;
bred (Abt(X\ Abt(Y\ X))) (Abt(X\X));;
bred (Abt(X\ Abt(Y\ Y))) (Abt(X\X));;