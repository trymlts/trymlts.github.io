type tm =
    | App of tm * tm
    | Abs of tm => tm
;;

type expval =
    | Fun of expval => expval
    | Res of res_at
;;

type res_nf =
    | Lam of res_at => res_nf
    | Val of res_at
;;

type res_at =
    | A of res_at * res_nf
;;

let rec assoc x l =
    match l with
    | ((y, a)::l) -> if x = y then a
        else assoc x l
;;


let norm t =
    let rec reify ev =
    match ev with
    | Fun f -> Lam(X\ reify (f @ (Res X)))
    | Res at -> Val at
    in
    
    let rec eval evl t = match t with
    | nab X in X -> let y = assoc X evl in y
    | Abs r -> Fun (Y\ new X in eval 
                                     ((X, Y)::evl)
                                     (r @ X)) 
  (*  | Abs r -> Fun (fun v -> new Y in 
                             eval ((Y, v)::evl) (r @ Y)) *)
    | App(l, r) ->
        begin match eval evl l with
        | Fun f -> f @ (eval evl r)
        | Res at -> Res (A(at, reify (eval evl r)))
        end
    in reify (eval [] t)
;;


norm (Abs(X\ X));;
norm (App(Abs(X\ X), Abs(Y\ App(Y, Y))));;